#!/bin/bash

CONFIG_FILE="$HOME/.config/sysconf/dotfiles.cfg"
INSTALL_QUEUE=""
CONFIG_QUEUE=""
TODO=""
BLUETOOTH=false

function checkconf()
{
    echo ":: Reading configuration"
    if !([ -f $CONFIG_FILE ]); then
        echo ":: No config file found. Make sure you run a regular install with this script."
    fi
}

function confenable()
{
    if !([ -f $CONFIG_FILE ]); then
        mkdir -p $HOME/.config/sysconf/
        touch $CONFIG_FILE
    fi
    if !(grep -q "$1 *= " $CONFIG_FILE); then
        echo "$1 $2" >> $CONFIG_FILE
    fi
}

function checksudo()
{
    if !(which sudo > /dev/null); then
        echo ":: Warning: sudo has to be installed before running this script."
        echo ":: Exiting"
        exit 1
    fi
}

function createuser()
{
    read -p ":: Do you want to create a new user? [Y/n] " -r
    if [[ $REPLY =~ ^[Nn]$ ]]
    then
        exit 1
    fi
    echo
    read -p ":: Please enter the user name: " NAME
    if id -u $NAME >/dev/null 2>&1; then
        echo ":: User already exists!"
        exit 1
    fi
    sudo useradd $NAME -m -G audio
    echo "$USER ALL=(ALL) ALL" | sudo tee --append /etc/sudoers > /dev/null
    echo ":: Please enter preferred user passwd"
    sudo passwd $NAME
}

function checkuser()
{
    if [ "$(id -un)"  != "root" ]; then
        echo ":: Executing as regular user. Continuing."
    else
        echo ":: Warning: running as root. Please create a new user by running createuser or su into it to continue using this script."
        exit 1
    fi
}

function main()
{
    echo ":: Enabling NetworkManager"
    sudo systemctl start NetworkManager
    sudo systemctl enable NetworkManager
    echo ":: Updating File Locations"
    sudo updatedb
}

function install()
{
    echo ":: Starting System Update"
    pacaur -S --needed  $INSTALL_QUEUE
    echo ":: System Update Finished"
}

function configure(){
    echo ":: Starting Configuring"
    arr=($CONFIG_QUEUE)
    for config in ${arr[@]}; do
        echo "$config"
        eval "$config"
    done
    echo ":: Configuring Finished"
}

function addsshclients()
{
    read -p ':: Add additional ssh connections? [Y/n]' -r
    if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
        sshclient
        addsshclients
    fi
}

function vnc(){
    echo":: Configuring TigerVNC"
    vncserver
    vncserver -kill :1
    sudo loginctl enable-linger reinout
    systemctl --user enable vncserver@:1
    systemctl --user start vncserver@:1
}

function wol(){
    echo ":: Configuring WoL"
    #Todo
    #sudo systemctl enable wol@
    #sudo systemctl enable wol@
}

function syncthing()
{
    echo ":: Enabling Syncthing PPA"
    curl -s https://syncthing.net/release-key.txt | sudo apt-key add -
    echo "deb http://apt.syncthing.net/ syncthing release" | sudo tee /etc/apt/sources.list.d/syncthing.list
    sudo apt-get update
    sudo apt-get install syncthing
    echo ":: Configuring Syncthing"
    xmlstarlet ed -L -u '/configuration/gui/address' -v 0.0.0.0:8384 .config/syncthing/config.xml
    sudo systemctl enable syncthing@$USER
    sudo systemctl start syncthing@$USER
    TODO+= ":: Syncthing\n"
    TODO+= ":: Further configurations can be done by the webui\n"
}

function ssh()
{
    echo  ":: Enabling sshd"
    sudo systemctl enable sshd
    sudo systemctl start sshd
    sudo ln -sf $PWD/ssh/etc/ssh/* /etc/ssh/
    sudo systemctl restart sshd
    confenable ssh 2
}

function zsh()
{
    echo ":: Getting extra packages"
    wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh
    echo ":: Configuring ZSH"
    stow -t ~/ zsh
    confenable zsh 0
    echo ":: Changing Shell"
    chsh -s $(which zsh)
    echo ":: Reload Shell to see effects"
}

function delugeserver()
{
    echo ":: Configuring Deluge Server"
    sudo adduser --system  --gecos "Deluge Service" --disabled-password --group --home /var/lib/deluge deluge
    sudo adduser reinout deluge
    sudo cp deluge/delugeservice/etc/systemd/system/deluged.service /etc/systemd/system/deluged.service
    sudo systemctl enable deluged
    sudo systemctl start deluged
    echo ":: Configuring Deluge WebServer"
    sudo cp deluge/delugewebservice/etc/systemd/system/deluge-web.service /etc/systemd/system/deluge-web.service
    sudo systemctl enable deluge-web
    sudo systemctl start deluge-web
    stow -t ~/ deluge
    echo ":: Configuring Deluge Logging"
    sudo mkdir -p /var/log/deluge
    sudo chown -R deluge:deluge /var/log/deluge
    sudo chmod -R 750 /var/log/deluge

    echo ":: Creating deluge auth file"
    read -p ":: Please enter the desired username: " name
    read -p ":: Please enter the desired password: " passwd
    echo "$name : $passwd :10" >> ~/.config/deluge/auth
    confenable deluge 0
}

function bluetooth()
{
    echo ":: Configuring Bluetooth"
    sudo systemctl start bluetooth
    sudo systemctl enable bluetooth
}

function config()
{
    echo ":: Installing Config Files"
    echo ":: Installing XResources"
    mkdir -p ~/.config/xresources/
    stow -t ~/ Xresources
  #  stow -t ~/ xprofile
    confenable Xresources 0
  #  confenable xprofile 0
    echo ":: Installing Vim"
    stow -t ~/ vim
    confenable vim 0
}

function audioclient()
{
    echo ":: NOTE: Due to mpd design, the actual audio client is run on the server, displaying it through ssh."
    echo ":: This purely sets the IP address for easy connection"
    sshclient mpd
}

function installvpn()
{
    #https://github.com/Angristan/OpenVPN-install
    echo ":: This needs to be redone"
    echo ":: Installing openvpn through git script"
    mkdir $PWD/tmp
    cd tmp
    git clone https://github.com/Angristan/OpenVPN-install.git
    cd OpenVPN-install
    chmod +x openvpn-install.sh
    sudo ./openvpn-install.sh
    cd ../../
    rm tmp -r
    read -p ':: Is this an Arch-based machine? [Y/n]'  -r
    if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
        echo ":: Due to current bugs in the script for the Arch distribution, several files still have to be moved/generated."
        echo ":: Please check once in a while if this is still necessary."
        sudo mv /etc/openvpn/server.conf /etc/openvpn/server/
        sudo mv /etc/openvpn/ca.crt /etc/openvpn/server/
        sudo mv /etc/openvpn/server.key /etc/openvpn/server/
        sudo mv /etc/openvpn/server.crt /etc/openvpn/server/
        sudo mv /etc/openvpn/crl.pem /etc/openvpn/server/
        sudo mv /etc/openvpn/tls-auth.key /etc/openvpn/server/
        sudo openssl dhparam -out /etc/openvpn/server/dh.pem 2048
    fi
    sudo systemctl enable openvpn-server@server
    sudo systemctl start openvpn-server@server
    read -p ":: What is this machine's local IP address? " SNATIP
    sudo iptables -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j SNAT --to $SNATIP
    sudo iptables-save | sudo tee --append /etc/iptables/iptables.rules > /dev/null
    sudo systemctl enable iptables
    sudo systemctl start iptables
}

function sshclient()
{
    mkdir ~/.ssh/sockets/ -p
    touch ~/.ssh/config
    read -p ":: What is the server's IP address? " IP
    if [ -z "$1" ]; then
        read -p ":: And how do you want to call the server? " NAME
    else
        NAME="$1"
    fi
    echo "Host $NAME" >> ~/.ssh/config
    echo "    HostName $IP " >> ~/.ssh/config
    echo "    Port 22" >> ~/.ssh/config
    echo "    ControlMaster auto" >> ~/.ssh/config
    echo "    ControlPersist yes" >> ~/.ssh/config
    echo "    ControlPath ~/.ssh/sockets/socket-%r@%h:%p" >> ~/.ssh/config
    echo "    AddressFamily inet" >> ~/.ssh/config
    echo ":: Updated ssh config file for easy server access under '$NAME'"

}
function pihole(){
    #vpn
    pacaur -S pi-hole-server
    sudo cp /etc/dnsmasq.conf /etc/dnsmasq.orig
    sudo cp /etc/pihole/configs/dnsmasq.main /etc/dnsmasq.conf
    sudo cp /etc/lighttpd/lighttpd.conf /etc/lighttpd/lighttpd.orig
    sudo cp /etc/pihole/configs/lighttpd.conf /etc/lighttpd/lighttpd.conf
    sudo systemctl reenable dnsmasq.service
    sudo systemctl restart dnsmasq.service
    sudo systemctl reenable lighttpd.service
    sudo systemctl restart lighttpd.service
    echo "extension=sockets.so" | sudo tee --append /etc/php/php.ini > /dev/null
    echo "interface=tun0" | sudo tee --append /etc/dnsmasq.d/01-pihole.conf > /dev/null
    echo "localise-queries" | sudo tee --append /etc/dnsmasq.d/01-pihole.conf > /dev/null
    echo "PIHOLE_INTERFACE=tun0" | sudo tee --append /etc/pihole/setupVars.conf > /dev/null
    #todo domain hostname resolution

}

function hostname(){
#todo
    echo "Todo"
}
#TODO review
function piholeclient()
{
    sshclient
    echo ":: If you want to use the dns server, disable resolv.conf changing by your network manager."
    echo ":: You can do this in e.g. connman by editing connman.service and adding --nodnsproxy to execstart"
    echo ":: Setting the resolv.conf to the server"
    sudo rm /etc/resolv.conf
    sudo touch /etc/resolv.conf
    echo "nameserver $IP" | sudo tee --append /etc/resolv.conf > /dev/null
}

function audioserver()
{
    sudo mkdir /media
    read -p ":: If nessecary, is your HDD already mounted on /media? [Y/n]" -r
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        read -p ":: Please enter device name (e.g. /dev/sda2)"
        echo ":: Mounting $REPLY"
        sudo mount $REPLY /media
        read -p $'\x0a:: I assume you also want the drive auto-mounted? [Y/n]' -r
        if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
            echo ":: Putting $REPLY drive in automount."
            UUID=$(lsblk -no UUID /dev/sda1)
            echo "UUID=$UUID /media ext4 acl,noatime,nofail,x-systemd.device-timeout=10 0 2" | sudo tee --append /etc/fstab > /dev/null
        fi
    fi
    echo ":: Installing missing dependencies"
    pip install discogs-client
    pip3 install flask pyacoustid requests
     sudo wget https://raw.githubusercontent.com/ftrvxmtrx/split2flac/master/split2flac -P /usr/bin/
    echo ":: Configuring mpd"
    stow -t ~/ mpd
    confenable mpd 0
    sudo setfacl -m "u:mpd:rwx" /media
    sudo sed  '/\[Unit\]/a RequiresMountsFor=/media/' /etc/systemd/system/multi-user.target.wants/mpd.service
    sudo cp /etc/systemd/system/multi-user.target.wants/mpd.service /usr/lib/systemd/user/
    systemctl --user enable mpd
    systemctl --user start mpd TODO
    sudo loginctl enable-linger $USER
    echo ":: Installing PulseAudio Service."
    set-default-sink alsa_output.usb-Burr-Brown_from_TI_USB_Audio_DAC-00.analog-stereo
    confenable pulseService 1
    # Makes sure the wifi-dongle doesn't power off causing connection issues
    echo ":: Making sure the Wi-Fi connection doesn't sleep"
    sudo stow -t / WLanPOFix
    confenable WLanPOFix 1
    echo ":: Configuring Beets audio manager"
    stow -t ~/ beets
    confenable beets 0
    echo ":: Configuring Audio Client"
    stow -t ~/ ncmpcpp
    confenable ncmpcpp 0
    echo ":: Configuring MPD Scribble"
    mkdir ~/.mpdscribble
    sudo cp /etc/mpdscribble.conf ~/.mpdscribble/
    sudo chown $USER:$USER ~/.mpdscribble/mpdscribble.conf
    sudo cp mpdscribble/mpdscribble.service /usr/lib/systemd/user/
    read -p ":: Please enter your Last.FM username: " name
    read -p ":: Please enter your Last.FM password: " passwd
    mdpwd=$(echo -n "$passwd" | md5sum | cut -d ' ' -f 1)
    sed -i 's/\(username =\).*/\1/' .mpdscribble/mpdscribble.conf
    sed -i 's/\(password =\).*/\1/' .mpdscribble/mpdscribble.conf
    sed -i '/^username =/ s/$/ '$name'/' ~/.mpdscribble/mpdscribble.conf
    sed -i '/^password =/ s/$/ '$mdpwd'/' ~/.mpdscribble/mpdscribble.conf
    sudo systemctl stop mpdscribble
    sudo systemctl disable mpdscribble
    systemctl --user enable mpdscribble.service
    systemctl --user start mpdscribble.service
}

function pulsetransceiver()
{
    echo ":: Configuring PulseAudio for streaming"
    mkdir ~/.config/pulse #Required, may not be symlink
    stow -t ~/ pulsetransceiver
    confenable pulsetransceiver 0
    sudo systemctl start avahi-daemon
    sudo systemctl enable avahi-daemon
    systemctl --user enable pulseaudio
    systemctl --user start pulseaudio
    sudo loginctl enable-linger $USER
}

function pulsebluetooth()
{
    echo ":: Configuring PulseAudio for Bluetooth"
    sudo ln -sf $PWD/pulseBluetooth/etc/bluetooth/* /etc/bluetooth/
    TODO+= ":: Pulsaudio Bluetooth Configuration\n"
    TODO+= ":: You still need to manually pair and trust the device fam\n"
    TODO+= ":: Oh, and reboot before you do that. It sometimes gives issues.\n"
    confenable pulseBluetooth 2
}

function windowspassthrough(){
    echo ":: Enabling libvirt for passthrough"
    sudo systemctl enable --now libvirtd
    sudo systemctl enable virtlogd.socket
    sudo gpasswd -a $USER libvirt
    TODO+= ":: Windows Passthrough\n"
    TODO+= ":: Read the README in ./vm for instructions how to do the passthrough\n"
}

function ssd(){
    echo ":: Enabling ssd trimming timer"
    sudo systemctl start fstrim.timer
    sudo systemctl enable fstrim.timer
}

function restow(){
    checkconf
    while read config sudo; do
        case "$sudo" in
            "0")
                stow -R -t ~/ $config
                ;;
            "1")
                sudo stow -R -t / $config
                ;;
            "2")
                for DIR in $(find . -type f -name '*f*' | sed -r 's|/[^/]+$||' | sort -u); do
                    sudo ln $config/$DIR/* $DIR/
                done
                ;;
            *)
                echo ":: WARNING: ERROR FOUND IN CONFIGURATION FILE"
                echo ":: ABORTING"
                exit 1
                ;;
        esac
    done < $CONFIG_FILE
}


checkuser
checksudo
for i in "$@"; do
    case "$i" in
        "createuser")
            createuser
            ;;
        "restow")
            restow
            exit 0
            ;;
    esac
done

read -p ':: Do you want to install a minimal package list? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+=$(cat minpkglist)
    CONFIG_QUEUE+="ssh "
else
    read -p ':: Do you want to install a complete package list? [Y/n]' -r
    if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
        INSTALL_QUEUE+=$(cat minpkglist)
        INSTALL_QUEUE+=$(cat majpkglist)
        CONFIG_QUEUE+="main ssh "
    fi
fi

read -p ':: Do you want to use this machine as a Deluge Server? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+="deluged deluge-web deluge-console "
    CONFIG_QUEUE+="delugeserver "
fi

read -p ':: Do you want to use this machine as a Syncthing server? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="syncthing "
fi

read -p ':: Do you want to install/update your configuration files? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="config "
fi

read -p ':: Do you want to use this machine for passthrough? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+="virt-manager qemu libvirt ovmf bridge-utils "
    CONFIG_QUEUE+="windowspassthrough "
fi

read -p ':: Do you want to use this machine as an Audio Server? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+="mpd mpg123 mpdscribble alsa-utils pulseaudio beets python-pip python3-pip ncmpcpp cuetools shntool gstreamer1.0-plugins-bad gstreamer1.0-libav gstreamer1.0-plugins-good gstreamer1.0-plugins-ugly "
    CONFIG_QUEUE+="audioserver "
else
    read -p ':: Do you want to use this machine as an Audio Client instead? [Y/n]'  -r
    if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
        CONFIG_QUEUE+="audioclient "
    fi
fi

read -p ':: Do you want Bluetooth? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+="blueman "
    CONFIG_QUEUE+="bluetooth "
    BLUETOOTH=true
fi

read -p ':: Should this device be able to stream audio to/from other devices? [Y/n]'  -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+="pulseaudio-zeroconf avahi paprefs pavucontrol ttf-droid"
    CONFIG_QUEUE+="pulsetransceiver "
    if [ $BLUETOOTH == true ];then
        read -p ":: Do you also want Bluetooth streaming on this device? [Y/n]" -r
        if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
            INSTALL_QUEUE+="pulseaudio-alsa pulseaudio-bluetooth bluez bluez-libs bluez-utils bluez-firmware "
            CONFIG_QUEUE+="pulsebluetooth "
        fi
    fi
fi

read -p ':: Will this machine be connected to a pi-hole? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="piholeclient "
fi

read -p ':: Do you want to install zsh as shell? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+="zsh git-core "
    CONFIG_QUEUE+="zsh "
fi

read -p ':: Set up as VPN point? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="installvpn "
fi

read -p ':: Using an SSD? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+="util-linux "
    CONFIG_QUEUE+="ssd "
fi

read -p ':: Want to install TigerVNC? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+="TigerVNC "
    read -p ':: As server?? [Y/n]' -r
    if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
        CONFIG_QUEUE+="vnc "
    fi
fi
read -p ':: Want to WoL? [Y/n]' -r
if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    INSTALL_QUEUE+="wol-systemd "
    CONFIG_QUEUE+="wol "
fi
install
configure
addsshclients
echo ':: Install script terminating'
echo "$TODO"

