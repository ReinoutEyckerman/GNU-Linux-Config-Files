#!/bin/bash

CONFIG_FILE="$HOME/.config/sysconf/dotfiles.cfg"
INSTALL_QUEUE=""
CONFIG_QUEUE=""
TODO=""

. /etc/os-release
OS=$NAME
if [[ $OS == "Ubuntu"]]; then
  SUFFIX="-u"
elif [[ $OS == "Arch"]]; then
  SUFFIX="-a"


. ./scripts/core/configuration.sh
. ./scripts/core/formatting.sh
. ./scripts/core/user.sh
. ./scripts/ssh.sh
. ./scripts/aur.sh



function install()
{
    if [[ $OS == "Ubuntu"]]; then
      sudo apt install $INSTALL_QUEUE
    elif [[ $OS == "Arch"]]; then
      aur
      sudo pacaur -S $INSTALL_QUEUE
    fi
}

function configure(){
  print "Starting Configuring"
  arr=($CONFIG_QUEUE)
  for config in ${arr[@]}; do
    echo "$config"
    eval ./scripts/"$config".sh
  done
  print "Finished Configuring"
}

OPTS=`getopt
--long min,full,airsonic,bluetooth,deluge,fstab,mpd,ncmpcpp,
ssd,ssh,syncthing,wlansleepfix,wol,zsh,config,createuser,restow:
-n 'parse-options' -- "$@"`

checkuser
checksudo
# Now go through all the options
while true; do
    case "$1" in
      --min)
        if [[ $OS == "Ubuntu"]]; then
          sudo apt install $(minpkglist.ubuntu)
        elif [[ $OS == "Arch"]]; then
          aur
          pacaur -S $(minpkglist)
        fi
          ./scripts/ssh.sh $SUFFIX
         ;;
      --full)
        if [[ $OS == "Ubuntu"]]; then
          sudo apt install $(minpkglist.ubuntu)
          sudo apt install $(majpkglist.ubuntu)
        elif [[ $OS == "Arch"]]; then
          aur
          paucaur -S $(minpkglist)
          paucaur -S $(majpkglist)
        fi
        ./scripts/atom.sh $SUFFIX
        ./scripts/etcher.sh $SUFFIX
        ./scripts/ssh.sh $SUFFIX
         ;;
      --airsonic) ./scripts/airsonic.sh $SUFFIX ;;
      --bluetooth) ./scripts/bluetooth.sh $SUFFIX ;;
      --deluge) ./scripts/deluge.sh $SUFFIX ;;
      --fstab) ./scripts/fstab.sh $SUFFIX ;;
      --mpd) ./scripts/mpd.sh $SUFFIX ;;
      --ncmpcpp) ./scripts/ncmpcpp.sh $SUFFIX ;;
      --ssd) ./scripts/ssd.sh $SUFFIX ;;
      --ssh) ./scripts/ssh.sh $SUFFIX ;;
      --syncthing) ./scripts/syncthing.sh $SUFFIX ;;
      --wlansleepfix) ./scripts/wlansleepfix.sh $SUFFIX ;;
      --wol) ./scripts/wol.sh $SUFFIX ;;
      --zsh) ./scripts/zsh.sh $SUFFIX ;;
      --config) config;;
      --createuser) createuser;;
      --restow) restow;;
      --) shift break;;
    esac
done

if [ $OPTIND -eq 1 ];then
  read -p ':: Do you want to install a minimal package list? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    if [[ $OS == "Ubuntu"]]; then
      INSTALL_QUEUE+=$(cat minpkglist.ubuntu)
    elif [[ $OS == "Arch"]]; then
      INSTALL_QUEUE+=$(cat minpkglist)
    fi
    INSTALL_QUEUE+=" "
    CONFIG_QUEUE+="ssh "
  else
    read -p ':: Do you want to install a complete package list? [Y/n]' -r
    if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    if [[ $OS == "Ubuntu"]]; then
      INSTALL_QUEUE+=$(cat minpkglist.ubuntu)
      INSTALL_QUEUE+=" "
      INSTALL_QUEUE+=$(cat majpkglist.ubuntu)
    elif [[ $OS == "Arch"]]; then
      INSTALL_QUEUE+=$(cat minpkglist)
      INSTALL_QUEUE+=" "
      INSTALL_QUEUE+=$(cat majpkglist)
    fi
      INSTALL_QUEUE+=" "
      CONFIG_QUEUE+="ssh atom etcher "
    fi
  fi

  read -p ':: Do you want to use this machine as an Airsonic Server? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="airsonic "
  fi

  read -p ':: Do you want Bluetooth? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="bluetooth "
  fi

  read -p ':: Do you want to use this machine as a Deluge Server? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="deluge "
  fi

  read -p ':: Do you want to add to your fstab? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="fstab "
  fi

  read -p ':: Do you want to use this machine as a MPD Server? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="mpd "
  fi
  read -p ':: Do you want to use this machine as an ncmpcpp client? [Y/n]'  -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="ncmpcpp "
  fi

  read -p ':: Using an SSD? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="ssd "
  fi

  read -p ':: Do you want to use this machine as a Syncthing server? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="syncthing "
  fi

  read -p ':: Want to WoL? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="wol "
  fi

  read -p ':: Do you want to install zsh as shell? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="zsh "
  fi

  read -p ':: Do you want to install/update your configuration files? [Y/n]' -r
  if [[ $REPLY =~ ^[Yy]$ ]] || [[ $REPLY == "" ]];then
    CONFIG_QUEUE+="config "
  fi
fi

install
configure
addsshclients
print 'Updating DB'
sudo updatedb
print 'Install script terminating'
finish
